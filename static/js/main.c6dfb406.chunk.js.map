{"version":3,"sources":["components/Map-2D/Map-2D.jsx","components/app/App.js","serviceWorker.js","index.js","logo.svg"],"names":["geoUrl","data","generateCircle","deg","Array","fill","map","d","i","MapChart","useState","markerOffset","name","coordinates","markers","setMarkers","orbitArray","setOrbitArray","a","axios","get","res","orbitalData","apiCall","response","Longitude","Latitude","useEffect","orbitApiCall","timer","setInterval","clearInterval","projection","width","height","id","stroke","strokeWidth","background","orientation","geography","geographies","geo","key","rsmKey","onClick","console","log","properties","ISO_A3","transform","textAnchor","y","style","fontFamily","fontWeight","strokeDasharray","slice","App","loadingStatus","setLoadingStatus","loading","bgColor","spinnerColor","textColor","logoSrc","logo","text","Container","className","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"kQAgBMA,EAASC,EAEf,SAASC,EAAeC,GACtB,OAAKA,EACE,IAAIC,MAAM,KAAKC,KAAK,GAAGC,KAAI,SAACC,EAAGC,GACpC,MAAO,EAAE,IAAMA,EAAGL,MAFH,CAAC,EAAE,IAAK,GAAI,EAAE,GAAI,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,IAAK,IAgJjDM,MA1If,WAAqB,IAAD,EACaC,mBAAS,CAClC,CACEC,aAAc,EACdC,KAAM,MACNC,YAAa,CAAC,EAAE,MALN,mBACTC,EADS,KACDC,EADC,OASqBL,mBAAS,IAT9B,mBASPM,EATO,KASIC,EATJ,iDAsBd,4BAAAC,EAAA,sEACoBC,IAAMC,IAAN,oDADpB,OACQC,EADR,OAGEJ,EAAcI,EAAIpB,KAAKA,KAAKqB,aAH9B,4CAtBc,+BA4BCC,IA5BD,2EA4Bd,4BAAAL,EAAA,sEACyBC,IAAMC,IAAN,+CADzB,OACQI,EADR,OAIET,EAAW,CAAC,CACRJ,cAAe,GACfC,KAAM,MACNC,YAAa,CAACW,EAASvB,KAAKA,KAAKwB,UAAWD,EAASvB,KAAKA,KAAKyB,aAPrE,4CA5Bc,sBA8DlB,OAbIC,qBAAU,YAjDI,mCAkDZC,GACAL,MACA,IAEFI,qBAAU,WACR,IAAME,EAAQC,aAAY,WACtBP,MACF,KACF,OAAO,kBAAMQ,cAAcF,MAC3B,CAACf,IAIL,kBAAC,gBAAD,CAAekB,WAAW,qBAAqBC,MAAO,IAAKC,OAAQ,KACjE,kBAAC,IAAD,CACEC,GAAG,QACHD,OAAQ,EACRD,MAAO,EACPG,OAAO,UACPC,YAAa,EACbC,WAAW,UACXC,YAAa,CAAC,cAEhB,kBAAC,SAAD,CAAQH,OAAO,SACf,kBAAC,YAAD,CAAWA,OAAO,SAClB,kBAAC,cAAD,CAAaI,UAAWxC,EAAQoC,OAAO,OAAOC,YAAa,KACxD,qBAAGI,YACUnC,KAAI,SAAAoC,GACd,OACE,kBAAC,YAAD,CACEC,IAAKD,EAAIE,OACTJ,UAAWE,EACXrC,KAAM,UACNwC,QAAS,kBAAMC,QAAQC,IAAIL,EAAIM,WAAWC,iBAMnDnC,EAAQR,KAAI,gBAAGM,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaF,EAAtB,EAAsBA,aAAtB,OACX,kBAAC,SAAD,CAAQgC,IAAK/B,EAAMC,YAAaA,GAE5B,uBAAGsB,GAAG,OACNe,UAAU,uCAGR,0BAAM3C,EAAE,0HAAyH,0BAAMA,EAAE,2HAA0H,0BAAMA,EAAE,0HAAyH,0BAAMA,EAAE,2HAA0H,0BAAMA,EAAE,uHAAuHF,KAAK,YAAW,0BAAME,EAAE,sHAAsHF,KAAK,YAAW,0BAAME,EAAE,gLAAgLF,KAAK,YAAW,0BAAME,EAAE,iLAAiLF,KAAK,YAAW,0BAAME,EAAE,yHAAyHF,KAAK,YAAW,0BAAME,EAAE,sFAAsFF,KAAK,YAAW,0BAAME,EAAE,+KAA+KF,KAAK,YAAW,0BAAME,EAAE,mLAAmLF,KAAK,YAAW,0BAAME,EAAE,mLAAmLF,KAAK,YAAW,0BAAME,EAAE,oLAAoLF,KAAK,YAAW,0BAAME,EAAE,oLAAoLF,KAAK,YAAW,0BAAME,EAAE,+NAA+NF,KAAK,YAAW,0BAAME,EAAE,6jCAG1qF,0BACC4C,WAAW,SACXC,EAAGzC,EACH0C,MAAO,CAAEC,WAAY,YAAajD,KAAM,OAAQkD,WAAW,SAE1D3C,OAIP,kBAAC,OAAD,CAAMC,YAAaX,EAAe,GAAIkC,OAAO,OAAOC,YAAa,IACjE,kBAAC,OAAD,CACExB,YAAaX,EAAe,IAC5BkC,OAAO,UACPC,YAAa,EACbmB,gBAAiB,CAAC,EAAG,KAEvB,kBAAC,OAAD,CACE3C,YAAaX,GAAgB,IAC7BkC,OAAO,UACPC,YAAa,EACbmB,gBAAiB,CAAC,EAAG,KAIvB,kBAAC,OAAD,CACE3C,YAAaG,EAAWyC,MAAM,EAAE,KAChCrB,OAAO,UACPC,YAAa,IAGf,kBAAC,OAAD,CACExB,YAAaG,EAAWyC,MAAM,IAAK,KACnCrB,OAAO,UACPC,YAAa,M,6DCnGNqB,MAlDf,WAAgB,IAAD,EAC4BhD,oBAAS,GADrC,mBACNiD,EADM,KACQC,EADR,KAUb,OAPAjC,qBAAU,WACR,IAAME,EAAQC,aAAY,WACxB8B,GAAiB,KACjB,KACF,OAAO,kBAAM7B,cAAcF,MAC3B,IAGA,kBAAC,IAAD,CACAgC,QAASF,EACTG,QAAQ,UACRC,aAAa,UACbC,UAAU,UACVC,QAASC,IACTC,KAAK,4BAEL,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACnB,kBAACC,EAAA,EAAD,CAAKD,UAAU,SACb,kBAACE,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,SAAM,kBAAC,EAAD,MAAN,MAEF,kBAACD,EAAA,EAAD,SCpBcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a,qwwIEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.c6dfb406.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Graticule,\n  Line,\n  Sphere,\n  Marker\n} from \"react-simple-maps\";\nimport { PatternLines } from \"@vx/pattern\";\nimport data from './world-110m.json';\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from 'axios';\n\nconst geoUrl = data;\n\nfunction generateCircle(deg) {\n  if (!deg) return [[-180, 0], [-90, 0], [0, 0], [90, 0], [180, 0]];\n  return new Array(361).fill(1).map((d, i) => {\n    return [-180 + i, deg];\n  });\n}\n\nfunction MapChart() {\n    const [markers,setMarkers] = useState([\n        {\n          markerOffset: 0,\n          name: \"ISS\",\n          coordinates: [0,0]\n        }\n      ]);\n\n      const [orbitArray,setOrbitArray] = useState([]);\n\n/*\n      const [issData,setIssData] = useState([\n          {\n              speed: 0,\n              altitude: 0,\n              lat: 0,\n              long: 0\n          }\n      ]);\n*/\n\n      async function orbitApiCall(){\n        const res = await axios.get(`https://sat-track.azurewebsites.net/api/issOrbit`);\n        // console.log(res.data.data.orbitalData);\n        setOrbitArray(res.data.data.orbitalData);\n      }\n\n      async function apiCall(){\n        const response = await axios.get(`https://sat-track.azurewebsites.net/api/iss`);\n        // console.log(response.data.data)\n        //console.log(`Latitude -> ${response.data.data.Latitude} , Longitude -> ${response.data.data.Longitude}`)\n        setMarkers([{\n            markerOffset: -30,\n            name: \"ISS\",\n            coordinates: [response.data.data.Longitude, response.data.data.Latitude]\n          }]);\n/*\n          setIssData([\n              {\n                speed: 0,\n                altitude: response.data.data[\"Elevation-m\"],\n                lat: 0,\n                long: 0\n              }\n          ]);\n*/\n      }\n\n      useEffect(()=>{\n        orbitApiCall();\n        apiCall();\n      },[]);\n\n      useEffect(()=>{  \n        const timer = setInterval(()=>{\n            apiCall();\n        },6000);\n        return () => clearInterval(timer);\n      },[markers]);\n\n\n  return (\n    <ComposableMap projection=\"geoEquirectangular\" width={980} height={480}>\n      <PatternLines\n        id=\"lines\"\n        height={6}\n        width={6}\n        stroke=\"#776865\"\n        strokeWidth={1}\n        background=\"#F6F0E9\"\n        orientation={[\"diagonal\"]}\n      />\n      <Sphere stroke=\"#DDD\" />\n      <Graticule stroke=\"#DDD\" />\n      <Geographies geography={geoUrl} stroke=\"#FFF\" strokeWidth={0.5}>\n        {({ geographies }) =>\n          geographies.map(geo => {\n            return (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                fill={\"#81c784\"}\n                onClick={() => console.log(geo.properties.ISO_A3)}\n              />\n            );\n          })\n        }\n      </Geographies>\n      {markers.map(({ name, coordinates, markerOffset }) => (\n        <Marker key={name} coordinates={coordinates}>\n            {/* <circle r={20} fill=\"#F00\" stroke=\"#5100ff\" strokeWidth={2} /> */}\n            <g id=\"flat\" \n            transform=\"translate(-22,-22)\n              scale(0.09 0.09)\"\n            >\n              <path d=\"m120 32v146c0 8.837-7.163 16-16 16h-72c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h72c8.837 0 16 7.163 16 16z\"/><path d=\"m480 318v146c0 8.837-7.163 16-16 16h-72c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h72c8.837 0 16 7.163 16 16z\"/><path d=\"m480 32v146c0 8.837-7.163 16-16 16h-72c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h72c8.837 0 16 7.163 16 16z\"/><path d=\"m120 318v146c0 8.837-7.163 16-16 16h-72c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h72c8.837 0 16 7.163 16 16z\"/><path d=\"m312 432v32c0 8.837-7.163 16-16 16h-96c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h96c8.837 0 16 7.163 16 16z\" fill=\"#e8f8fc\"/><path d=\"m312 32v32c0 8.837-7.163 16-16 16h-96c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h96c8.837 0 16 7.163 16 16z\" fill=\"#e8f8fc\"/><path d=\"m296.248 32h-76.248c-8.837 0-16 7.163-16 16v16.084c0 12.914-20 13.852-20-.084v-32c0-8.837 7.163-16 16-16 101.804 0 96.209-.015 96.94.027 10.199.591 9.524 15.973-.692 15.973z\" fill=\"#f1fafc\"/><path d=\"m296.248 432h-76.248c-8.837 0-16 7.163-16 16v16.084c0 12.914-20 13.852-20-.084v-32c0-8.837 7.163-16 16-16 101.804 0 96.209-.015 96.94.027 10.199.591 9.524 15.973-.692 15.973z\" fill=\"#f1fafc\"/><path d=\"m296 368h-96c-8.837 0-16-7.163-16-16v-208c0-8.837 7.163-16 16-16h96c8.837 0 16 7.163 16 16v208c0 8.837-7.163 16-16 16z\" fill=\"#e8f8fc\"/><path d=\"m248 280c-17.645 0-32-14.355-32-32s14.355-32 32-32 32 14.355 32 32-14.355 32-32 32z\" fill=\"#75f6fc\"/><path d=\"m257.886 231.622c-13.154 2.325-23.953 13.056-26.286 26.223-1.259 7.106-11.139 7.971-13.636 1.2-9.434-25.582 15.718-50.487 41.134-41.062 6.772 2.511 5.9 12.381-1.212 13.639z\" fill=\"#aefcfc\"/><path d=\"m36.652 194h-4.652c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h4.724c7.987 0 15.276 6.226 15.276 16 0 .211-.001 146.053.002 146.264.119 8.631-6.718 15.736-15.35 15.736z\" fill=\"#4d4e59\"/><path d=\"m36.652 480h-4.652c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h4.724c7.987 0 15.276 6.226 15.276 16 0 .211-.001 146.053.002 146.264.119 8.631-6.718 15.736-15.35 15.736z\" fill=\"#4d4e59\"/><path d=\"m396.652 194h-4.652c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h4.724c7.987 0 15.276 6.226 15.276 16 0 .211-.001 146.053.002 146.264.119 8.631-6.718 15.736-15.35 15.736z\" fill=\"#4d4e59\"/><path d=\"m396.652 480h-4.652c-8.837 0-16-7.163-16-16v-146c0-8.837 7.163-16 16-16h4.724c7.988 0 15.276 6.226 15.276 16 0 .211-.001 146.053.002 146.264.119 8.631-6.718 15.736-15.35 15.736z\" fill=\"#4d4e59\"/><path d=\"m304.929 130.721c7.691 5.182 3.775 17.279-5.499 17.279h-80.43c-8.837 0-16 7.163-16 16v188.13c0 12.078-18.19 12.967-18.967.914-.052-.809-.033-209.855-.033-209.044 0-8.837 7.163-16 16-16h96c3.307 0 6.379 1.003 8.929 2.721z\" fill=\"#f1fafc\"/><path d=\"m280 248c0 17.645-14.355 32-32 32s-32-14.355-32-32 14.355-32 32-32 32 14.355 32 32zm164 38h36c8.836 0 16 7.164 16 16v178c0 8.836-7.164 16-16 16h-104c-8.836 0-16-7.164-16-16v-178c0-8.836 7.164-16 16-16h36v-22h-84v104c0 8.836-7.164 16-16 16h-48v16h48c8.836 0 16 7.164 16 16v64c0 8.836-7.164 16-16 16h-128c-8.836 0-16-7.164-16-16v-64c0-8.836 7.164-16 16-16h48v-16h-48c-8.836 0-16-7.164-16-16v-104h-84v22h36c8.836 0 16 7.164 16 16v178c0 8.836-7.164 16-16 16h-104c-8.836 0-16-7.164-16-16v-178c0-8.836 7.164-16 16-16h36v-76h-36c-8.836 0-16-7.164-16-16v-178c0-8.836 7.164-16 16-16h104c8.836 0 16 7.164 16 16v178c0 8.836-7.164 16-16 16h-36v22h84v-104c0-8.836 7.164-16 16-16h48v-16h-48c-8.836 0-16-7.164-16-16v-64c0-8.836 7.164-16 16-16h128c8.836 0 16 7.164 16 16v64c0 8.836-7.164 16-16 16h-48v16h48c8.836 0 16 7.164 16 16v104h84v-22h-36c-8.836 0-16-7.164-16-16v-178c0-8.836 7.164-16 16-16h104c8.836 0 16 7.164 16 16v178c0 8.836-7.164 16-16 16h-36zm-52-108h72v-146h-72zm-192-114h96v-32h-96zm-168 114h72v-146h-72zm72 140h-72v146h72zm192 114h-96v32h96zm0-288h-96v208h96zm168 174h-72v146h72z\"/>\n            </g>\n          \n           <text\n            textAnchor=\"middle\"\n            y={markerOffset}\n            style={{ fontFamily: \"system-ui\", fill: \"#000\", fontWeight:\"bold\" }}\n          >\n            {name}\n          </text>\n        </Marker>\n      ))}\n      <Line coordinates={generateCircle(0)} stroke=\"#F53\" strokeWidth={2} />\n      <Line\n        coordinates={generateCircle(23)}\n        stroke=\"#776865\"\n        strokeWidth={1}\n        strokeDasharray={[5, 5]}\n      />\n      <Line\n        coordinates={generateCircle(-24)}\n        stroke=\"#776865\"\n        strokeWidth={1}\n        strokeDasharray={[5, 5]}\n      />\n      {/* ISS Orbital Lines */}\n      {/* Current orbit */}\n      <Line\n        coordinates={orbitArray.slice(0,1000)}\n        stroke=\"#8c00ff\"\n        strokeWidth={4}\n      />\n      {/* Next orbit */}\n      <Line\n        coordinates={orbitArray.slice(1000,2000)}\n        stroke=\"#f21120\"\n        strokeWidth={4}\n      />\n    </ComposableMap>\n  );\n}\n\nexport default MapChart;\n","import './App.css';\nimport MapChart from '../Map-2D/Map-2D';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport React, { useEffect, useState } from 'react';\nimport LoadingScreen from 'react-loading-screen';\nimport logo from '../../logo.svg';\n\n\nfunction App() {\n  const [loadingStatus,setLoadingStatus] = useState(true);\n\n  useEffect(()=>{\n    const timer = setInterval(()=>{\n      setLoadingStatus(false)\n    },5000);\n    return () => clearInterval(timer);\n  },[])\n\n  return (\n    <LoadingScreen\n    loading={loadingStatus}\n    bgColor='#f1f1f1'\n    spinnerColor='#9ee5f8'\n    textColor='#676767'\n    logoSrc={logo}\n    text='Loading ISS since Epoch!'\n  >\n    <Container className=\"container\">\n      <Row className=\"map2d\">\n        <Col>ISS Tracking</Col>\n        <Col> <MapChart /> </Col>\n      </Row>\n      <Row>{/*\n        <Col>\n          <table>\n            <tbody>\n              <tr>\n                <th>Speed</th>\n                <th>Altitude</th>\n                <th>Latitude</th>\n                <th>Longitude</th>\n              </tr>\n              <tr>\n                <td></td>\n                <td></td>\n                <td></td>\n                <td></td>\n              </tr>\n            </tbody>\n          </table>\n      </Col>*/}\n      </Row>\n    </Container>\n  </LoadingScreen>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.2e6579fa.svg\";"],"sourceRoot":""}